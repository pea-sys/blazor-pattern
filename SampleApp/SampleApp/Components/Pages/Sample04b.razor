@page "/Sample04b"
@using SampleApp.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid

@* アプリケーションサービス *@
@inject IDbContextFactory<PubsDbContext> DbFactory

<h3>Sample04 : 一覧表示</h3>

<div class="grid" tabindex="-1">
	<QuickGrid ItemsProvider="@ItemsProvider" Virtualize="true" ItemSize="5">

		<PropertyColumn Property="@(a => a.AuthorId)" Title="著者ID" Sortable="true" />
		<TemplateColumn Title="著者名" Sortable="true"
						SortBy="@(GridSort<Author>.ByAscending(a => a.AuthorFirstName).ThenAscending(a => a.AuthorLastName))">
			@(context.AuthorFirstName) @(context.AuthorLastName)
		</TemplateColumn>
		<PropertyColumn Property="@(a => a.Phone)" Title="電話番号" Sortable="true" />
		<PropertyColumn Property="@(a => a.State)" Title="州" Sortable="true" />
		<TemplateColumn Title="契約有無" Sortable="true" SortBy="@(GridSort<Author>.ByAscending(a => a.Contract))">
			<input type="checkbox" disabled value="@(context.Contract)" />
			@(context.Contract ? "契約あり" : "契約なし")
		</TemplateColumn>
	</QuickGrid>
</div>



@code {
	private GridItemsProvider<Author>? ItemsProvider { get; set; }

	private string? LogMessage { get; set; } // デバッグ用メッセージ

	protected override void OnInitialized()
	{
		ItemsProvider = async request =>
		{
			// ここはデバッグ用のコード
			LogMessage += "(" + request.StartIndex + " " + request.Count + ") ";
			StateHasChanged();

			// 指定された位置のデータを指定行だけ取得して返す
			await using (var pubs = await DbFactory.CreateDbContextAsync())
			{
				var data = await pubs.Authors.Skip(request.StartIndex).Take(request.Count ?? 0).ToListAsync();
				var totalCount = await pubs.Authors.CountAsync();
				return GridItemsProviderResult.From(data, totalCount);
			}
		};
	}
}
